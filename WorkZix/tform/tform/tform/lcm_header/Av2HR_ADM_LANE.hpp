/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __Av2HR_ADM_LANE_hpp__
#define __Av2HR_ADM_LANE_hpp__

#include <vector>
#include "Av2HR_ADM_SPEED_LIMIT.hpp"
#include "Av2HR_ADM_WAYPOINT.hpp"


class Av2HR_ADM_LANE
{
    public:
        int8_t     m_bIsCalculatedRoute;
        Av2HR_ADM_SPEED_LIMIT m_speed;
        int16_t    m_iWaypointNum;
        std::vector< Av2HR_ADM_WAYPOINT > m_waypointList;

    public:
        inline int encode(void *buf, int offset, int maxlen) const;
        inline int getEncodedSize() const;
        inline int decode(const void *buf, int offset, int maxlen);
        inline static int64_t getHash();
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static int64_t _computeHash(const __lcm_hash_ptr *p);
};

int Av2HR_ADM_LANE::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int Av2HR_ADM_LANE::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int Av2HR_ADM_LANE::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t Av2HR_ADM_LANE::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* Av2HR_ADM_LANE::getTypeName()
{
    return "Av2HR_ADM_LANE";
}

int Av2HR_ADM_LANE::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->m_bIsCalculatedRoute, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->m_speed._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->m_iWaypointNum, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->m_iWaypointNum; a0++) {
        tlen = this->m_waypointList[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int Av2HR_ADM_LANE::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->m_bIsCalculatedRoute, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->m_speed._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->m_iWaypointNum, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    this->m_waypointList.resize(this->m_iWaypointNum);
    for (int a0 = 0; a0 < this->m_iWaypointNum; a0++) {
        tlen = this->m_waypointList[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int Av2HR_ADM_LANE::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += this->m_speed._getEncodedSizeNoHash();
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->m_iWaypointNum; a0++) {
        enc_size += this->m_waypointList[a0]._getEncodedSizeNoHash();
    }
    return enc_size;
}

int64_t Av2HR_ADM_LANE::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == Av2HR_ADM_LANE::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, (void*)Av2HR_ADM_LANE::getHash };

    int64_t hash = 0xed61e1febcaef472LL +
         Av2HR_ADM_SPEED_LIMIT::_computeHash(&cp) +
         Av2HR_ADM_WAYPOINT::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
