//======================================================================
/*! \file HOWTO.txt
 * \brief A short introduction how to use IbeoSDK.
 * \copydoc Copyright
 * \author Jan Christian Dittmer (jcd)
 * \date Aug 08, 2014
 *///-------------------------------------------------------------------

=======================================================================
Table Of Contents
=======================================================================
 1. Requriements
 2. HTML-Doxygen Documentation
 3. To build the IbeoSDK as library
 4. To build the demos
 5. Concept - IbeoDevice/DataBlock/DataListener
 6. Build your own programs, using ibeosdk
 7. Type name conflicts
 8. Logging
 9. How to use Logging
10. Capturing of the Logging Stream
11. Troubleshooting

=======================================================================
1. Requirements
=======================================================================
C++-Compiler
------------
Tested with (Linux: gcc 4.6.3, Microsoft VS2008, VS 2010 and VS 2012)


boost
-----

Has to be installed.

Tested with
  boost 1.48.0 (Linux)

  Windows (using precompiled boost libraries)
  boost:   1.48.0     1.52
  VS2008   32 Bit     32 Bit
  VS2010   32 Bit     32+64 Bit
  VS2012              32+64 Bit

(boost precompiled libraries are not available from boost.org directly but
from e.g.
  http://sourceforge.net/projects/boost/files/boost-binaries/
  http://boost.teeks99.com/
Choose the right boost version and the libraries for the right visual
studio version, e.g. vc110 = Visual Studio 2012)


gmake (Linux only)
------------------
provides the make command


=======================================================================
=======================================================================
2. HTML-Doxygen Documentation
=======================================================================
You can open the doxygen documenation by opening the "start.html" file
in your browser.
If you have installed doxygen on your system you may create this
documentation yourself by running "make docs".

=======================================================================
=======================================================================
3. To build the IbeoSDK as library
=======================================================================

Linux:
- open a shell window
- enter directory IbeoSDK
- type "make shared" for a shared library and
  type "make static" for a static library
- the libraries will be found in the newly created folder IbeoSDK/libs

  Available Makefile Targets
    shared       Build ibeosdk as shared library
    shareddemos  Build ibeosdk as shared library and demos using
                 the shared library (demo binary will end with suffix _shared).
    static       Build ibeosdk as static library
    staticdemos  Build ibeosdk as static library and demos using
                 the shared library (demo binary will end with suffix _static).
    clean        Delete all object files and dependency files (*.o .d) and
                 demo binaries.
    democlean    Delete all demo binaries and demo object files and dependency
                 files.
    distclean    Like clean and the libs folder will be erased as well
    docs         Create a documentation from the doxygen comments. The result
                 can be found in docs/html/index.html
    docsclean    Delete all generated documentation.
    all          Will generate the ibeosdk object files (static flags) and link
                 them directly to the demo binaries (no lib will be generated,
                 demo binaries won't have a suffix).

  NOTE: In case the compile flags used for the last build does not match with
  the requested target, i.e. old: static, new: shared or vice versa, all ibeosdk
  object files will be recompiled.

Windows (VS 2010)
- see "To build the demos"

Windows (VS 2012)
- see "To build the demos"

Linux/Windows (CMake):
	There is a CMakeLists.txt (CMake config file) to setup a project
	(Visual Studio, Makefile, etc.).

	Limitations
	The disadvantage of using CMake is, that the project file will
	not be automatically updated in case a new file has been added
	or an file has been removed without manual trigger or change
	in the CMakeLists.txt(s) itself.

	Furthermore a project (e.g. VS) can only be generated for 32Bit or
	64Bit. You cannot switch within the solution. Among other things
	because the library path (boost, ibeosdk, etc.) will be the same,
	which won't work.


=======================================================================
=======================================================================
4. To build the demos
=======================================================================

Linux:
- open a shell window
- enter directory IbeoSDK
- execute make, see "To build the IbeoSDK as library"
  "Available Makefile Targets".
- the demo binaries will be found in IbeoSDK/src/demo

  On default the library and binary will be build as debug targets.
  To compile in release (optimized) mode add
    OPTIMIZE=on DEBUG=off
  to your parameters for the make call.

Windows (VS 2008/VS 2010/VS 2012)
- start VS 2008, VS 2010 or VS2012

- load solution
  - VS2008 (32 bit):      IbeoSDK/ibeosdk_VS2008.sln
  - VS2010 - 32bit only:  IbeoSDK/ibeosdk.sln
  - VS2010 - 32bit/64bit: IbeoSDK/ibeosdk_VS2010.sln
  - VS2012 - 32bit/64bit: IbeoSDK/ibeosdk_VS2012.sln
  ATTENTION  VS 2010: For 64 bit, one has to install WinSDK 7.1. If you do not
                      have installed WinSDK use ibeosdk.sln not
                      ibeosdk_VS2010.sln.

- only for VS2010/VS2012: Choose solution platform (32bit or 64bit):
	- Mark the solution in the Solution Explorer in VS2012 by a mouse left
	  click.
	- In the popup menu (right mouse button), choose "Configuration Manager ..."
	- Choose the active solution platform between Win32 (32bit) or x64 (64bit).

- set your boost version and the path to it:
	--> Open the Property Manager (see VS menu bar: View/Property Manager(*)).
	--> unfold the ibeosdk item
	--> unfold the Debug | Win32 item
	--> open BoostX86SettingPropertySheet by double click
	--> Common Properties
		--> User Macros
			--> Set the four environment variables so that the compiler and
			    linker will find the include files and libraries:
			    BoostVersionInLibname: The version number of boost used in the
			                           library names, e.g. 1_52
			    BoostVersionInPath:    The version number of boost used in the
			                           directory path, e.g. 1_52_0
			    BoostDir:              The place where to find the include
			                           files, e.g.
			                           C:\boost\boost_$(BoostVersionInPath)
			    BoostLibDir:           The directory where to find the libraries
			                           to link with,
			                           e.g. C:\boost\boost_$(BoostVersionInPath)
                                            \lib32
	If you use Visual Studio 2012 or Visual Studio 2010 (with WinSDK 7.1) also
	--> unfold the Debug | x64 item
	--> open BoostX64SettingPropertySheet by double click
	proceed as for the Debug Win32 item but choose the paths to the 64 bit
	libraries.

	Known Problems: A problem has occured when the boost directory was located
		directly in "C:\Program Files (x86" as in
		"C:\Program Files (x86)\boost_1_47". The include
		files were not. Moving the folder boost_1_47 into a subfolder solved the
		problem as in "C:\Program Files (x86)\boost\boost_1_47"

- build the ibeosdk project

- build a demo project

- to run a demo you need to add arguments when you call it from the command
  line or if you want to debug it with Visual Studio you can add these arguments
  (like IP address, filename, logfile) in:
	--> Configuration -> "All Configurations"
	--> Configuration Properties
		--> Debugging
			--> Command Arguments


(*): In VS 2010 the Property Manager may not be find in the View menu.
     To see the Property Manager you need to have Expert Settings enabled.
     You can find this option in:
     Menu Tools
         --> Settings


=======================================================================
=======================================================================
5. Concept - IbeoDevice/DataBlock/DataListener
=======================================================================

The connection to the hardware device, i.e. Ibeo laserscanner or ECU
will be handled by an IbeoDevice. The IbeoDevice will receive messages
(scan, object list, vehicle data, images) from the scanner/ECU and
deserialize each into a DataBlock. On receive it will inform all
DataListener for the specific type of the DataBlock which has been
registered to the IbeoDevice.
Hence the Device receive the DataBlock it will call the onData method
of all registered DataListener where user action can be performed.
That means there is no active polling of a new DataBlock from the Device.

=======================================================================
=======================================================================
6. Build your own programs, using ibeosdk
=======================================================================

Decide which device to connect to.
Currently available are
  IbeoLux      (LUX3/4 Laserscanner)
  IbeoEcu      (Ibeo ECU device, connected to a scanner)
  IbeoScala    (Ibeo Scala (B1 or B2) Laserscanner)
  IbeoMiniLux  (Ibeo MiniLux laserscanner)

A collection of all needed include will be included by include
the following files:
  IbeoLux include:     <ibeosdk/lux.hpp>
  IbeoEcu include:     <ibeosdk/ecu.hpp>
  IbeoScala include:   <ibeosdk/scala.hpp>
  IbeoMiniLux include: <iboesdk/minilux.hpp>

Decide which messages you are interested in and create a listner class
for each message type. (You will find examples in IbeoSdkFileDemo:
class MyScanListener, MyObjectListener, ... and in IbeoSdkEcuLiveDemo:
AllEcuListener where all listeners gathered into one single class).

1. Create the listener objects.
2. Create the IbeoDevice providing the IP address and port as parameters.
3. Optional: Set the devices LogFileManger
4. Register all listener
5. Establish connection between the hardware and the IbeoDevice class.

The receiving will be handled in a separate thread. So the main thread has
to be kept alive.

IMPORTANT: Exit your program calling exit (cstdlib) instead of just return
from the main function to close all open channels to prevent crashes due
to open channels.

IMPORTANT: If you build static libibeosdk.a on Linux you have to link with
the link option --whole-archive (use "-Wl,--whole-archive" on the g++ command
line). Otherwise no DataBlocks will be received by the devices.
On Windows Visual Studio will generate a list of linker include commands
automatically by calling "src/ibeosdk/generateDataBlockList.bat" as a
prebuild event in the given projects to avoid the problem.

-----------------------------------------------------------------------
-----------------------------------------------------------------------
Example:
-----------------------------------------------------------------------

See IbeoSdkEcuLiveDemo.cpp, class AllEcuListener.
Since AllEcuListener is derived from many listeners, the AllEcuListener object
allEcuListener has to register in the function live_demo to the Ecu device for
all its listener ancestors.
After the ecu object has been connected the task will kept alive.
All the work will done by the Ecu receive thread. When receiving an new
DataBlock it will inform all registered Listener for this DataBlock and call
their onData method.

In case an ObjectListEcuEt DataBlock has been received the onData method of all
registered ObjectListEcuEtListener will be called. This call is within the
context of the receive thread of the Ecu object.

Here the user can perform some action. This should not take too long since the
TCP/IP interface will not be able to receive while this processing.
For example one can show the ids of all received objects:

virtual void onData(const ObjectListEcuEt* const objectList)
{
	logInfo << "ET Objects received: # " << objectList->getNbOfObjects()
		<< std::endl;
	const std::vector<ObjectEcuEt>& objects = objectList->getObjects();
	for (unsigned int i = 0; i < objects.size(); ++i) {
		std::cerr << "Object " << i
			<< " has id: " << objects.at(i).getObjectId() << std::endl;
	}
}


=======================================================================
=======================================================================
7. Type name conflicts
=======================================================================

All types defined in the SDK are inside the ibeo namespace.
In case of a name conflict, don't use the
	using namespace ibeosdk;
so generous but selective inside methods where no conflict arises and
the ibeosdk:: as prefix otherwise.


=======================================================================
=======================================================================
8. Logging
=======================================================================
The LogFile class provides you functions for logging output, e.g.
logError, logInfo, logWarning, logDebug which can be used instead of
cerr or cout with operator<<.
These "functions" are actually macros which call the LogFile methods
_logError, _logInfo, etc. with predefined compiler macros as arguments,
i.e. file name, function name and current source code line number.
The log file name can be either a regular file name or "cerr" which is
the default. In this case the output will be performed to the cerr
stream.

Using class LogFileManager one can implement a automatic synchronously
splitting of the log file and some other IDC output files, which are of
class SplitFile and has be registered to the LogFileManager object.
A split of the files will be performed in case the log file has reached
(or slightly exceeded) its file size limit. Furthermore each registered
SplitFile can send a split request to its LogFileManager object in case
the size limit of this file has been exceeded. 

Splits will be performed only before a DataType_LuxScan or DataType_EcuScan
object. I.e. LogFileManager::checkSplitRequired will be called by IbeoDevice
before notifying a newly received DataBlock. Only if the data type of this
DataBlock is DataType_LuxScan or DataType_EcuScan, the method will actually
check the condition for and perform a split.
This leads to the situation that the actually size of an output file
(or log file) will exceed the given size limit depending on how many
DataBlocks will be received before the next scan. This has to be taken
into account when setting the file size limit.

An example for a SplitFile you find with class IdcWriter in IbeoSdkWriterDemo.

=======================================================================
=======================================================================
9. How to use Logging
=======================================================================

Using LogFileManager
--------------------
Create a LogFileManager object.
call LogFile::setTargetFileSize   (to set the maximal file size)
call LogFile::setLogFileBaseName  (optional; cerr is default)
call LogFile::setLogLevel         (to set the log level filter)
call logFileManager.start         (to open the log file)

Optional:
create the IbeoDevice
call lux.setLogFileManager        (Set the LogFileManager so that
                                   the IbeoDevice can trigger a check
                                   whether a split is necessary.)


Not Using LogFileManager
------------------------
call LogFile::setLogFileBaseName  (optional; cerr is default)
call LogFile::setLogLevel         (to set the log level filter)
call LogFile::getLogFile          (to open the log file)

=======================================================================
=======================================================================
10. Capturing of the Logging Stream
=======================================================================

To be able to use the Logging in an environment that is not providing
a cout/cerr or the possibility of file output, it is also possible to
capture the contents to be written by the logging output stream. The
capturing will happen linewise, i.e. whenever you send an endl to the
stream your callback method (see below) will be called with the line as
a c-string passed as a parameter.

An example can be found in IbeoSdkFileDemo.cpp.
Derive a class from
	CustomLogStreamCallback
(in the example CustomLogStreamCallbackExample) and implement the method
	virtual void onLineEnd(const char* const s, const int)

Before starting the logging, create an object of your class and set the
CustomLogStreamCallback pointer of LogFile using
	LogFile::setCustomLogStreamCallback
(see IbeoSdkFileDemo.cpp:main) with a pointer on your object.
The ownership of the CustomLogStreamCallback object that is passed via pointer
remains at the caller. It has to be make sure that this object exists through
the whole time, when logging is active.

In the implementation of onLineEnd you can call a write or print method suitable
to environment. In the example std::cerr is used.

=======================================================================
=======================================================================
11. Troubleshooting
=======================================================================

Receive Buffer too small
------------------------

The following message indicates that the receive message buffer is too small.
Error  - MsgBuffer.cpp::recvMsg(134): Illegal message body size occured, buffer
 size exceeded: XXXXX Bytes in received DataBlock: 0xHHHH Set to 0.
Where 0xHHHH is data block id that has been received.

To handle this problem increase the buffer size in
src/ibeosdk/IbeoTcpIpDeviceBase.hpp
	static const int msgBufferSize = 196608;
to a size suitable to you message to be received
and recompile you application.


After upgrading to version 4.2.1 or later I suddenly receive each datablock serveral times
-----------------------------------------------------------------------------------------

The registration of the listener has changed with 4.2.1.
Before it was necessary to register (with static cast) a multi-listener class
for each datablock that can and should be received by this class object.
Now, since the internal structure of the class DataListener has changed,
this is not necessary any longer. On contrary, each time you register the listener,
the listener will added to listen for all its supported datablocks.
Therefore just one call of regsiterListener with such an multi-listener class object
is necessary.

The log output is suddenly dead when using a CustomLogStream
------------------------------------------------------------

The custom CustomLogStream is using an internal buffer to hold a log line
until an end-of-line will be received. If this end-of-line has been received,
the line is complete and the customized action will be performed.
But if the line is too long to be hold by the internal buffer, operator<<
will stop to store more data into the (full) internal buffer.
Hence the end-of-line will never reach the buffer and therefore the customized
action will never be performed and the buffer will not be depleted.
By default the buffer size is set to 5000 characters (1000 before version 4.3.1).
To change this default change the signature of
CustomLogStream::create in Log.hpp.
